//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int Destructed = 0;
    public const int SelfDestructTimer = 1;
    public const int View = 2;
    public const int ViewPath = 3;
    public const int ViewPrefab = 4;
    public const int Active = 5;
    public const int Damage = 6;
    public const int DamageTakenAnimator = 7;
    public const int EntityLink = 8;
    public const int Id = 9;
    public const int SpriteRenderer = 10;
    public const int StatusVisuals = 11;
    public const int Transform = 12;
    public const int WorldPosition = 13;
    public const int Cooldown = 14;
    public const int CooldownLeft = 15;
    public const int CooldownUp = 16;
    public const int DamageEffect = 17;
    public const int Effect = 18;
    public const int EffectSetups = 19;
    public const int EffectValue = 20;
    public const int ProducerId = 21;
    public const int TargetId = 22;
    public const int BuffTimer = 23;
    public const int CreateEffectInterval = 24;
    public const int Enemy = 25;
    public const int EnemyAnimator = 26;
    public const int EnemyShaman = 27;
    public const int EnemyTypeID = 28;
    public const int RadiusToFindEnemy = 29;
    public const int ReloadingTimer = 30;
    public const int SpawnTimer = 31;
    public const int Hero = 32;
    public const int HeroAnimator = 33;
    public const int CurrentHp = 34;
    public const int Dead = 35;
    public const int MaxHp = 36;
    public const int ProcessingDeath = 37;
    public const int Destination = 38;
    public const int Direction = 39;
    public const int MovementAvailable = 40;
    public const int Moving = 41;
    public const int MovingProcess = 42;
    public const int OrbitCenterFollowTarget = 43;
    public const int OrbitCenterPosition = 44;
    public const int OrbitPhase = 45;
    public const int OrbitRadius = 46;
    public const int RotationAlignedByDirection = 47;
    public const int Speed = 48;
    public const int TargetPosition = 49;
    public const int TurnedAlongDirection = 50;
    public const int CollectingTargetsContinuously = 51;
    public const int CollectTargetsInterval = 52;
    public const int CollectTargetsTimer = 53;
    public const int LayerMask = 54;
    public const int Processed = 55;
    public const int ProcessedTargets = 56;
    public const int Radius = 57;
    public const int Reached = 58;
    public const int ReadyToCollectTargets = 59;
    public const int TargetLimit = 60;
    public const int TargetsBuffer = 61;

    public const int TotalComponents = 62;

    public static readonly string[] componentNames = {
        "Destructed",
        "SelfDestructTimer",
        "View",
        "ViewPath",
        "ViewPrefab",
        "Active",
        "Damage",
        "DamageTakenAnimator",
        "EntityLink",
        "Id",
        "SpriteRenderer",
        "StatusVisuals",
        "Transform",
        "WorldPosition",
        "Cooldown",
        "CooldownLeft",
        "CooldownUp",
        "DamageEffect",
        "Effect",
        "EffectSetups",
        "EffectValue",
        "ProducerId",
        "TargetId",
        "BuffTimer",
        "CreateEffectInterval",
        "Enemy",
        "EnemyAnimator",
        "EnemyShaman",
        "EnemyTypeID",
        "RadiusToFindEnemy",
        "ReloadingTimer",
        "SpawnTimer",
        "Hero",
        "HeroAnimator",
        "CurrentHp",
        "Dead",
        "MaxHp",
        "ProcessingDeath",
        "Destination",
        "Direction",
        "MovementAvailable",
        "Moving",
        "MovingProcess",
        "OrbitCenterFollowTarget",
        "OrbitCenterPosition",
        "OrbitPhase",
        "OrbitRadius",
        "RotationAlignedByDirection",
        "Speed",
        "TargetPosition",
        "TurnedAlongDirection",
        "CollectingTargetsContinuously",
        "CollectTargetsInterval",
        "CollectTargetsTimer",
        "LayerMask",
        "Processed",
        "ProcessedTargets",
        "Radius",
        "Reached",
        "ReadyToCollectTargets",
        "TargetLimit",
        "TargetsBuffer"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(Code.Common.Destructed),
        typeof(Code.Common.SelfDestructTimer),
        typeof(Code.Common.View),
        typeof(Code.Common.ViewPath),
        typeof(Code.Common.ViewPrefab),
        typeof(Code.Gameplay.Common.Active),
        typeof(Code.Gameplay.Common.Damage),
        typeof(Code.Gameplay.Common.DamageTakenAnimatorComponent),
        typeof(Code.Gameplay.Common.EntityLink),
        typeof(Code.Gameplay.Common.Id),
        typeof(Code.Gameplay.Common.SpriteRendererComponent),
        typeof(Code.Gameplay.Common.StatusVisualsComponent),
        typeof(Code.Gameplay.Common.TransformComponent),
        typeof(Code.Gameplay.Common.WorldPosition),
        typeof(Code.Gameplay.Features.Cooldowns.Cooldown),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownLeft),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownUp),
        typeof(Code.Gameplay.Features.Effects.DamageEffect),
        typeof(Code.Gameplay.Features.Effects.Effect),
        typeof(Code.Gameplay.Features.Effects.EffectSetups),
        typeof(Code.Gameplay.Features.Effects.EffectValue),
        typeof(Code.Gameplay.Features.Effects.ProducerId),
        typeof(Code.Gameplay.Features.Effects.TargetId),
        typeof(Code.Gameplay.Features.Enemies.BuffTimer),
        typeof(Code.Gameplay.Features.Enemies.CreateEffectIntervalComponent),
        typeof(Code.Gameplay.Features.Enemies.Enemy),
        typeof(Code.Gameplay.Features.Enemies.EnemyAnimatorComponent),
        typeof(Code.Gameplay.Features.Enemies.EnemyShaman),
        typeof(Code.Gameplay.Features.Enemies.EnemyTypeIDComponent),
        typeof(Code.Gameplay.Features.Enemies.RadiusToFindEnemyComponent),
        typeof(Code.Gameplay.Features.Enemies.ReloadingTimer),
        typeof(Code.Gameplay.Features.Enemies.SpawnTimer),
        typeof(Code.Gameplay.Features.Hero.Hero),
        typeof(Code.Gameplay.Features.Hero.HeroAnimatorComponent),
        typeof(Code.Gameplay.Features.LifeTime.CurrentHp),
        typeof(Code.Gameplay.Features.LifeTime.Dead),
        typeof(Code.Gameplay.Features.LifeTime.MaxHp),
        typeof(Code.Gameplay.Features.LifeTime.ProcessingDeath),
        typeof(Code.Gameplay.Features.Movement.Destination),
        typeof(Code.Gameplay.Features.Movement.Direction),
        typeof(Code.Gameplay.Features.Movement.MovementAvailable),
        typeof(Code.Gameplay.Features.Movement.Moving),
        typeof(Code.Gameplay.Features.Movement.MovingProcess),
        typeof(Code.Gameplay.Features.Movement.OrbitCenterFollowTarget),
        typeof(Code.Gameplay.Features.Movement.OrbitCenterPosition),
        typeof(Code.Gameplay.Features.Movement.OrbitPhase),
        typeof(Code.Gameplay.Features.Movement.OrbitRadius),
        typeof(Code.Gameplay.Features.Movement.RotationAlignedByDirection),
        typeof(Code.Gameplay.Features.Movement.Speed),
        typeof(Code.Gameplay.Features.Movement.TargetPosition),
        typeof(Code.Gameplay.Features.Movement.TurnedAlongDirection),
        typeof(Code.Gameplay.Features.TargetCollection.CollectingTargetsContinuously),
        typeof(Code.Gameplay.Features.TargetCollection.CollectTargetsInterval),
        typeof(Code.Gameplay.Features.TargetCollection.CollectTargetsTimer),
        typeof(Code.Gameplay.Features.TargetCollection.LayerMask),
        typeof(Code.Gameplay.Features.TargetCollection.Processed),
        typeof(Code.Gameplay.Features.TargetCollection.ProcessedTargets),
        typeof(Code.Gameplay.Features.TargetCollection.Radius),
        typeof(Code.Gameplay.Features.TargetCollection.Reached),
        typeof(Code.Gameplay.Features.TargetCollection.ReadyToCollectTargets),
        typeof(Code.Gameplay.Features.TargetCollection.TargetLimit),
        typeof(Code.Gameplay.Features.TargetCollection.TargetsBuffer)
    };
}
